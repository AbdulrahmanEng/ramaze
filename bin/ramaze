#!/usr/bin/env ruby

RAMAZE_BASE = File.join(File.dirname(__FILE__), '..', 'lib')
RAMAZE_BASE.replace File.expand_path(RAMAZE_BASE)

require File.join(RAMAZE_BASE, 'ramaze')

RAMAZE_VERSION = "Ramaze Version #{Ramaze::VERSION}"

require 'optparse'
require 'ostruct'
require 'abbrev'

options = {:origin => :console, :create => false, :force => true}
cli_options = Ramaze::CLI_OPTIONS
cli_abbrevs = cli_options.map{|o| o.name.to_s}.abbrev
cli_abbrevs = Hash[*cli_abbrevs.select{|k,v| k.size == 1}.flatten].invert

assign = lambda{|opt, value| options[opt.name] = value}

opts = OptionParser.new do |opts|
  ruby_version = "ruby #{RUBY_VERSION} (#{RUBY_RELEASE_DATE}) [#{RUBY_PLATFORM}]" 
  ramaze_version = "#{RAMAZE_VERSION}, on #{ruby_version}"

  opts.banner = "Usage: ramaze main.rb [OPTIONS]"
  opts.define_head ramaze_version

  opts.on('--create PROJECT', "A new application based on proto.") do |input|
    options[:create] = input
  end

  cli_options.each do |option|
    cli_name = option.name.to_s.gsub('_', '-')
    short_option = cli_abbrevs[option.name.to_s]
    short_option = '-' + short_option if short_option
    long_option = '--' + cli_name

    case option.cli
    when TrueClass
      params = [short_option, "--[no-]#{cli_name}", option.doc]
    when FalseClass
      params = [short_option, long_option, option.doc]
    when Numeric
      params = [short_option, "#{long_option} NUM", Integer, option.doc]
    when String
      params = [short_option, "#{long_option} STRING", String, option.doc]
    when Array
      list = option.cli.map(&:to_s)
      aliases = list.abbrev
      list = "  (#{list.join(', ')})"

      params = [short_option, long_option, option.cli, aliases, option.doc, list]
    else
      pp option
      next
    end

    options[option.name] = option.default

    opts.on(*params.compact) do |input|
      options[option.name] = input
    end
  end

  opts.separator ''
  opts.separator 'Common options:'

  # -? keeps -p for --port free
  opts.on_tail('-?', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', "Show version") do
    puts ramaze_version
    exit
  end
end

opts.parse!(ARGV)
runner = (ARGV + ['main.rb']).find{|f| File.exists?(f)}

if project = options.delete(:create)
  require 'ramaze/tool/create'
  Ramaze::Tool::Create.create(project)
  exit
end

if ARGV.empty? and not runner
  puts opts
  exit
end

begin
  puts "running `#{runner}'"
  require runner
rescue LoadError => ex
  puts ex
  puts ex.backtrace
  puts "Maybe i cannot find `#{runner}'"
  puts "You could provide a file to execute like:"
  puts "$ ramaze myapp.rb"
  exit
end

if options.delete(:console)
  options[:run_loose] = true
  ARGV.clear # Avoid passing args to IRB

  Ramaze.start(options)

  require 'irb'
  require 'irb/completion'

  def exit; Ramaze.shutdown; end

  ENV['IRBRC'] = ".irbrc" if File.exists? ".irbrc"
  IRB.start
  Ramaze.shutdown
else
  Ramaze.start(options)
end
