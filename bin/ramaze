#!/usr/bin/env ruby

# = Synopsis
#
# The commandline tool to control ramaze
#
# = Usage
# ramaze [switches] startfile [arguments]
#
# --create:: create a new application based on proto
#
# -m, --mongrel:: use mongrel to process requests
# -w, --webrick:: the default
#
# -b, --benchmark:: inform about :error, :info, :debug, :benchmark
# -d, --debug::     inform about :error, info, :debug
# -t, --stage::     inform about :info, :error
# -l, --live::      inform about :error
# -s, --silent::    inform about nothing
#
# -a, --autoreload:: Set the interval at which autoreload searches
#                    for changes in your files
#
# -o, --host::       which host should ramaze listen for requests
#                    default is 0.0.0.0
# -p, --port::       what port should ramaze use, like 80 or 7000..7005
#                    default is 7000
#
# -n, --no-errorpage:: don't use the default errorpage of ramaze
#                      helpful if you want to make sure noone can
#                      ever see your code by accident or for testing
# --template-root:: set a custom template-root for the whole
#                   application, please note that ~ is not
#                   expanded to your home-directory
# -a, --autoreload=N:: set how frequent ramaze should search for
#                      updated files in your application
# -r, --run-loose:: don't take control after startup.
#                   this is useful for testcases.
# --cache:: use the simple caching based on the signature
#           of your requests (experimental)
# --tidy:: run Tool::Tidy over text/html output
#
# -h, --help::      print this help
# -v, --version::   print the version
# -c, --copyright:: print the copyright
#
# Please report bugs to <m.fellinger at gmail.com>
#
# = Copyright
#            Copyright (c) 2006 Michael Fellinger m.fellinger@gmail.com
#   All files in this distribution are subject to the terms of the Ruby license.

require 'ramaze'

runner = ARGV.find{|file| File.file?(file)} || 'main.rb'

begin
  require 'getoptlong'
  require 'rdoc/ri/ri_paths'
  require 'rdoc/usage'

  # memo:
  #   REQUIRED_ARGUMENT, NO_ARGUMENT, OPTIONAL_ARGUMENT

  opts = GetoptLong.new *[
    [ '--create',               GetoptLong::REQUIRED_ARGUMENT ],
    [ '--mongrel',        '-m', GetoptLong::NO_ARGUMENT       ],
    [ '--webrick',        '-w', GetoptLong::NO_ARGUMENT       ],

    [ '--debug',          '-d', GetoptLong::NO_ARGUMENT       ],
    [ '--stage',          '-t', GetoptLong::NO_ARGUMENT       ],
    [ '--live',           '-l', GetoptLong::NO_ARGUMENT       ],
    [ '--silent',         '-s', GetoptLong::NO_ARGUMENT       ],

    [ '--host',           '-o', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--port',           '-p', GetoptLong::REQUIRED_ARGUMENT ],

    [ '--benchmark',      '-b', GetoptLong::NO_ARGUMENT       ],
    [ '--no-errorpage',   '-n', GetoptLong::NO_ARGUMENT       ],
    [ '--template-root',        GetoptLong::REQUIRED_ARGUMENT ],
    [ '--autoreload',     '-a', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--run-loose',      '-r', GetoptLong::NO_ARGUMENT       ],

    [ '--console',        '-c', GetoptLong::NO_ARGUMENT       ],
    [ '--help',           '-h', GetoptLong::NO_ARGUMENT       ],
    [ '--version',        '-v', GetoptLong::NO_ARGUMENT       ],
    [ '--copyright',            GetoptLong::NO_ARGUMENT       ],
  ]

  options = {:force_setup => true, :force => true}

  create = lambda do |app|
    require 'ramaze/tool/create'
    Ramaze::Tool::Create.create(app)
    exit
  end

  opts.each do |opt, arg|
    sopt = opt[2..-1].gsub('-', '_').intern

    options[:inform_tags] = Set.new([:debug, :info, :error])

    case sopt
    when :create            : create[arg]
    when :help              : RDoc::usage('Usage')
    when :version           : puts("ramaze #{Ramaze::Version}")
    when :copyright         : RDoc::usage('Copyright')
    when :mongrel, :webrick : options[:adapter] = sopt

    when :benchmark         : options[:inform_tags] << :benchmark
    when :debug             : options
    when :stage             : options[:inform_tags].subtract [:debug]
    when :live              : options[:inform_tags].subtract [:info, :debug]
    when :silent            : options[:inform_tags].subtract options[:inform_tags]

    when :host              : options[:host] = arg
    when :port              : options[:port] = arg

    when :no_errorpage      : options[:error_page] = false
    when :template_root     : options[:template_root] = arg
    when :autoreload        : options[:autoreload] = arg.to_i
    when :run_loose         : options[:run_loose] = true
    end
  end

  puts "running #{File.expand_path(runner)}"
  require runner

  if options.delete(:console)
    options.merge!(:run_loose => true)

    ARGV.clear # Avoid passing args to IRB 

    Ramaze.start(options)

    require 'irb'
    require 'irb/completion'

    def exit
      exit!
    end

    ENV['IRBRC'] = ".irbrc" if File.exists? ".irbrc"
    IRB.start
    exit!
  else
    Ramaze.start(options)
  end
rescue LoadError => ex
  puts ex
end
