Ramaze is a very simple and straight-forward web-framework.
The philosophy of it could be expressed in a mix of KISS and POLS, trying to
make simple things simple and complex things possible.

This of course is nothing new to anyone who knows some ruby, but is often
forgotten in a chase for new functionality and features. Ramaze only tries to
give you the ultimate tools, but you have to use them yourself to achieve
perfect custom-tailored results.

Another interesting aspect is that Ramaze tries to provide as much reusable
code as possible, as to encourage the use of its code in similar projects and
to act as a single point of reference for projects using its components.
This tries to tackle the problem that everybody who wants/needs to create a
custom web framework always has to reimplement the most basic and common
functionality.

So when for example someone wants a basic example of how to build a comfortable
testing environment for a web framework it's hardly leading to the goal if this
first has to be reinvented before even the basic testing can start.

The same goes for the implementation of sessions or the request/response
objects which are collected under the module Trinity. Or all the examples
of real world-usage of the most popular templating-engines. Within a framework,
not to mention the basic need for a Dispatcher.

Of course most other frameworks will introduce their own paradigms and special
implementations, and this is the reason why it is not encouraged to directly
require files from Ramaze, they are one working entity together, but with a few
modifications it's your very own implementation and fits into your own project.
